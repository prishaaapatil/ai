from collections import deque
room = [['C', 'D'],
        ['D', 'C']]
class CleaningRobot:
    def __init__(self, room, start):
        self.room, self.pos = room, start
    def find_dirty(self):
        return [(r, c) for r in range(len(self.room))
                for c in range(len(self.room[0])) if self.room[r][c] == 'D']
    def neighbors(self, r, c):
        for nr, nc in [(r-1,c),(r+1,c),(r,c-1),(r,c+1)]:
            if 0<=nr<len(self.room) and 0<=nc<len(self.room[0]):
                yield (nr, nc)
    def bfs(self, start, goal):
        q = deque([(start, [start])])
        vis = {start}
        while q:
            (r, c), path = q.popleft()
            if (r, c) == goal: return path
            for n in self.neighbors(r, c):
                if n not in vis:
                    vis.add(n)
                    q.append((n, path+[n]))
    def plan_and_clean(self):
        while True:
            dirty = self.find_dirty()
            if not dirty:
                print("\n All spots cleaned!")
                break
            path = min((self.bfs(self.pos, d) for d in dirty if self.bfs(self.pos, d)), key=len)
            print(f"\nPath to {path[-1]}: {path}")
            for step in path[1:]:
                self.pos = step
                self.room[step[0]][step[1]] = 'C'
                print(f"Cleaned {step}")
robot = CleaningRobot(room, (0, 0))
robot.plan_and_clean()
