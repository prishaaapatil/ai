def minimax(node, is_max, tree):
    if node not in tree:
        return node
    values = [minimax(child, not is_max, tree) for child in tree[node]]
    return max(values) if is_max else min(values)
def find_path(node, is_max, tree):
    if node not in tree:
        return [node]
    children = tree[node]
    if is_max:
        best_child = max(children, key=lambda c: minimax(c, not is_max, tree))
    else:
        best_child = min(children, key=lambda c: minimax(c, not is_max, tree))
    return [node] + find_path(best_child, not is_max, tree)
tree = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F', 'G'],
    'D': [-1, 8],
    'E': [-3, -2, 1],
    'F': [2, 1],
    'G': [-3, 4]
}
print("Root Node Value:", minimax('A', True, tree))
print("Optimal Path:", " â†’ ".join(map(str, find_path('A', True, tree))))
